@page "/"

@inject ICategoryData categoryData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1 class="m-2">Training Suggestions</h1>
<div>
    <button class="btn btn-primary m-2" @onclick="@CreateCat" >Suggest</button>
</div>

<div class="row m-1">
    <div class="">@suggestions?.Count Suggestion(s)</div>
    <div>
        <button class="btn btn-info me-1" @onclick="(() => OrderByNew(true))">New</button>
        <button class="btn btn-info " @onclick="(() => OrderByNew(false))">Popular</button>
    </div>
    <div> 
        <input type="text" placeholder="Search" aria-label="Search Box" class="input-group-text mt-5" 
        @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    </div>
</div>

<div class="row">
    <div>
        @if (suggestions is not null)
        {
            //think of this a for loop
            //overscan is the number of items loaded in the list that you can't see, but they are loaded
            //to make scrolling appear smooth/no lag.
            <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
                <div>
                    <div>
                        <div>@GetUpvoteTopText(s)</div>
                        <span class="oi oi-caret-top"></span>
                        <div>@GetUpvoteBottomText(s)</div>
                    </div>
                    <div>
                        <div @onclick="(() => OpenDetails(s))">
                            @s.SuggestionText
                        </div>
                        <div>
                            <div @onclick="(() => OpenDetails(s))">
                            @s.Category?.CategoryName
                            </div>
                        </div>
                    </div>
                    <div>
                        <div>
                            @s.SuggestionStatus?.StatusName
                        </div>
                    </div>
                </div>

            </Virtualize>
        }
    </div>

    @*List all categories and statuses if not null*@
    <div>
        @if(categories is not null)
        {
            <div>
                <span>Category</span>
                <div @onclick="(() => OnCategoryClick())">All</div>
                @foreach (var c in categories)
                {
                    <div @onclick="(() => OnCategoryClick(c.CategoryName))">
                        @c.CategoryName
                    </div>
                }
            </div>
        }

        @if(statuses is not null)
        {
            <div>
                <span>Status</span>
                <div @onclick="(() => OnStatusClick())">All</div>
                @foreach (var s in statuses)
                {
                    <div @onclick="(() => OnStatusClick(s.StatusName))">
                        @s.StatusName
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {

    private List<Category> categories;
    private List<Status> statuses;
    private List<Suggestion> suggestions;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    bool isSortedByNew = true;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetCategoriesAsync();
        statuses = await statusData.GetStatusesAsync();
        suggestions = await suggestionData.GetAllApprovedSuggestionsAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = stringResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetAllApprovedSuggestionsAsync();

        if(selectedCategory!= "All")
        {
            output = output
                        .Where(s => s.Category?.CategoryName == "selectedCategory")
                        .ToList();
        }

        if(selectedStatus!= "All")
        {
            output = output
                        .Where(s => s.SuggestionStatus?.StatusName == "selectedStatus")
                        .ToList();
        }

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output
                        .Where(
                            s => s.SuggestionText.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                            s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
                        .ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated)
                            .ToList();
        }

        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count)
                            .ThenByDescending(s => s.DateCreated)
                            .ToList();
        }

        suggestions = output;

        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }

    private string GetUpvoteTopText(Suggestion model)
    {
        if(model.UserVotes?.Count > 0)
        {
            return model.UserVotes.Count.ToString("00");
        }

        else
        {
            return "Click To";
        }
    }

    private string GetUpvoteBottomText(Suggestion model)
    {
        if(model.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }

        else
        {
            return "Upvote";
        }
    }

    private void OpenDetails(Suggestion model)
    {
        navManager.NavigateTo($"/Details/{model.SuggestionId}");
    }

    private void CreateCat()
    {
        var cat = new Category
            {
                CategoryDescription = "test",
                CategoryId = "1",
                CategoryName = "another test",
                Type = "category"
            };

        categoryData.Create(cat);
    }
}